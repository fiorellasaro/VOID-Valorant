import { useState, useEffect } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useGetLeaderboardQuery } from "../services/valorant";
import PlayerCard from "../components/molecules/playerCard";
import { Container } from "@mantine/core";
import Spinner from "../components/atoms/spinner";

const ITEMS_PER_PAGE = 1000;

const Home: NextPage = () => {
  const [page, setPage] = useState(1);
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  const region = "eu";
  const { data, isLoading, isError } = useGetLeaderboardQuery({
    version: "v2",
    region: region,
  });

  const handleScroll = () => {
    // Calculate the distance between the bottom of the page and the current scroll position
    const distanceToBottom =
      document.documentElement.offsetHeight -
      (window.innerHeight + window.pageYOffset);

    // Load more data when the user is near the bottom of the page and not currently loading more data
    if (distanceToBottom < 100 && !isLoadingMore) {
      setPage((prevPage) => prevPage + 1);
    }
  };

  useEffect(() => {
    // Attach the scroll event listener when the component mounts
    window.addEventListener("scroll", handleScroll);

    // Remove the scroll event listener when the component unmounts
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, [isLoadingMore]);

  useEffect(() => {
    // Reset isLoadingMore when new data is fetched
    setIsLoadingMore(false);
  }, [data]);

  const loadMoreData = () => {
    setIsLoadingMore(true);
  };

  if (isLoading) {
    return <Spinner />;
  }

  if (isError) {
    return <div>Error occurred while fetching data</div>;
  }

  // Calculate the start and end index for the current page
  const startIndex = (page - 1) * ITEMS_PER_PAGE;
  const endIndex = page * ITEMS_PER_PAGE;

  return (
    <div className={styles.container}>
      <Head>
        <title>VOID: Valorant</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container size="sm" style={{ margin: "auto" }}>
          {/* Render cards for the players in the current page */}
          {data?.players.slice(startIndex, endIndex).map((playerData) => (
            <PlayerCard
              key={playerData.PlayerCardID}
              data={playerData}
              region={region}
            />
          ))}
        </Container>
      </main>
    </div>
  );
};

export default Home;
